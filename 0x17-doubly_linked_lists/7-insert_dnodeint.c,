#include "lists.h"

/**
 * insert_dnodeint_at_index - inserts a new node at a given position
 * @h: double pointer to head of the list
 * @idx: index of the list where the new node should be added
 * @n: data for the new node
 *
 * Return: address of the new node,
 *         or NULL if it failed to add the new node
 */
dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n)
{
    dlistint_t *new_node, *temp;
    unsigned int i;

    if (h == NULL)
        return (NULL);

    new_node = malloc(sizeof(dlistint_t));
    if (new_node == NULL)
        return (NULL);

    new_node->n = n;
    new_node->prev = NULL;
    new_node->next = NULL;

    if (*h == NULL && idx == 0)
    {
        *h = new_node;
        return (new_node);
    }

    temp = *h;
    for (i = 0; i < idx && temp != NULL; i++)
        temp = temp->next;

    if (temp == NULL && i == idx)
    {
        new_node->prev = temp->prev;
        new_node->next = temp;
        temp->prev->next = new_node;
        temp->prev = new_node;
        return (new_node);
    }
    else if (temp != NULL)
    {
        new_node->prev = temp->prev;
        new_node->next = temp;
        temp->prev = new_node;

        if (new_node->prev != NULL)
            new_node->prev->next = new_node;
        else
            *h = new_node;

        return (new_node);
    }

    free(new_node);
    return (NULL);
}
